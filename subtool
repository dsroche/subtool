#!/usr/bin/env bash

set -e
set -u
shopt -s nullglob

CURL=${CURL-curl} # allow to specify an alternate command for curl
srcdir=$(dirname "$(readlink -f "$0")")
defurlbase="http://submit.cs.usna.edu/api"

# listing all option flags
opt0arg=srh
opt1arg=kqupfgjd

### general usage ####
function usage {
  # output to stderr if this is an error message
  [[ $# -eq 1 && $1 -ne 0 ]] && exec 1>&2
  echo "\
Usage: $0 <command> [<args>] [<options>]

Available commands:
  p[roject]
  f[iles] (for test cases)
  t[estcase]
  s[ubmission]
  m[anual]
  i[nternal] (undocumented stuff)
  h[elp]

Most command require an apikey and course to be specified, either
using -p or in a config file. Many commands also require a project.

Options (may be more for specific commands):"
  genopts
  [[ $# -eq 1 ]] && exit $1
}
function genopts {
  echo "\
  -k <file>
    Specify curl config file (may be given more than once)
    Witn no -k, parent dirs are searched for [.]subtoolrc
    Writing - for <file> indicates stdin.
  -q <file>
    Specify query file (may be given more than once), containing
    rows with \"<name> <value>\" pairs to be added as POST query
    parameters. In the file, <name> must not contain whitespace while
    <value> can contain spaces (though not newlines).
    Writing - for <file> indicates stdin.
  -u <url>
    Specify url base, default $defurlbase
  -s
    Don't run anything, just output a config file which *would*
    run that using the \"manual\" command
  -p <name>=<value>
    Specify a POST value to be sent along with the query
    Typical ones: course, apikey, project, user
  -f <filename>
    Specify a file to be sent along with the query.
    \"-\" means to use stdin
  -g <filename>
    Like -f, but combine all files into a single .tar.gz to send
    May be given multiple times.
  -j <script>
    Run the given jq script with the returned JSON value.
  -r
    Return raw input, don't process through jq
  -d <folder>
    Download and extract a tar.gz into the specified folder
  -h
    Same as \"help\". Can be used in conjunction with specific commands"
}


#### helper functions to convert between query file format and a single json object
function query2arr {
  # assigns query on filedes 5 to associative array "arr"
  local name val bstr line f2
  while read -u5 -r name val; do
    if [[ ${val:0:2} == "<<" ]]; then
      bstr=$(sed -e 's/^[[:blank:]]*//' -e 's/[[:blank:]]*$//' -e "s/^['\"]\(.*\)['\"]$/\1/" <<<"${val:2}")
      val=''
      f2=true
      while IFS='' read -r line && [[ $line != $bstr ]]; do
        if $f2; then
          f2=false
        else
          val+="\\n"
        fi
        line=${line//\\/\\\\}
        line=${line//\"/\\\"}
        line=${line//	/\\t}
        val+="$line"
      done
      arr["$name"]="$val"
    else
      val=${val//\\/\\\\}
      val=${val//\"/\\\"}
      val=${val//	/\\t}
      arr["$name"]="$val"
    fi
  done
  return 0
}

function query2json {
  local name val first arr
  exec 5<&0
  declare -A arr=()
  query2arr
  exec 5<&-
  echo -n '{'
  first=true
  for name in "${!arr[@]}"; do
    if $first; then
      first=false
    else
      echo -n ','
    fi
    val=${arr["$name"]}
    if [[ -n $val && $val =~ ^[0-9]*$ ]]; then
      echo -n "\"$name\": $val"
    else
      echo -n "  \"$name\": \"$val\""
    fi
  done
  echo '}'
  return 0
}

function json2query {
  local name val rawval bstr
  exec 4< <(jq '[to_entries | .[] | [(.key | tostring),(.value | tostring)]] | flatten | .[]')
  while read -u4 name && read -u4 -r val; do
    echo -n "${name//\"/} "
    rawval=$(jq -r '.' <<<"$val")
    if [[ $(wc -l <<<"$rawval") -le 1 ]]; then
      echo "$rawval"
    else
      bstr='END'
      while [[ $rawval =~ $bstr ]]; do
        bstr+="D"
      done
      echo "<<$bstr"
      echo "$rawval"
      echo "$bstr"
    fi
  done
  exec 4<&-
  return 0
}


#### create a temp folder which is removed on exit ####
tempdir=$(mktemp --tmpdir -d subtoolXXXXXXXX)
chmod 700 "$tempdir"
savetemp=false

function cleanup {
  exec 4>&-
  if $savetemp; then
    if find "$tempdir" -mindepth 1 -exec false {} + -quit; then
      # directory is empty, so safe to delete
      rmdir "$tempdir"
    else
      echo "WARNING: some files remain in temp directory $tempdir" >&2
    fi
  else
    rm -rf "$tempdir"
  fi
  return 0
}

trap cleanup EXIT


#### helper function to copy stdin to a file ####
function copyin {
  local fname="$tempdir/_stdin"
  cat >"$fname"
  echo "$fname"
}


#### parse command line arguments ####
cmd=""
args=()
configs=()
declare -A opts
declare -A posts
files2tar=()

function add2tar {
  if [[ ! -r $1 ]]; then
    echo "ERROR: cannot read tarball file $1" >&2
    exit 3
  fi
  files2tar+=( "$1" )
  return 0
}

curopt="" # leftover options, used in the loop
while true; do
  while [[ -z $curopt && $# -ge 1 ]]; do
    if [[ ${1:0:1} = '-' ]]; then
      curopt=${1:1}
    elif [[ -z $cmd ]]; then
      cmd=$1
    else
      args+=( "$1" )
    fi
    shift
  done
  [[ -n $curopt ]] || break

  oname=${curopt:0:1} # letter for this option
  curopt=${curopt:1} # the rest of the argument, other options or an argument

  unset -v 'optarg'
  if [[ $oname =~ [$opt1arg] ]]; then
    # if option takes an argument, assign it
    if [[ -n $curopt ]]; then
      optarg=$curopt
      curopt=''
    elif [[ $# -ge 1 ]]; then
      optarg=$1
      shift
    else
      echo "ERROR: option -$oname needs an argument" >&2
      exit 2
    fi
  fi

  case $oname in
    k)
      if [[ $optarg = "-" ]]; then
        configs+=( "$(copyin)" )
      elif [[ ! -r $optarg ]]; then
        echo "ERROR: cannot read config file \"$optarg\"" >&2
        exit 3
      else
        configs+=( "$optarg" )
      fi
      ;;
    q)
      if [[ $optarg = "-" ]]; then
        exec 5<&0
      elif [[ ! -r $optarg ]]; then
        echo "ERROR: cannot read query file \"$optarg\"" >&2
        exit 3
      else
        exec 5<"$optarg"
      fi
      declare -A arr=()
      query2arr
      exec 5<&-
      for nam in "${!arr[@]}"; do
        posts["$nam"]=${arr["$nam"]}
      done
      unset -v 'arr'
      ;;
    p)
      posts["${optarg%%=*}"]=${optarg#*=}
      ;;
    f)
      if [[ $optarg = "-" ]]; then
        posts['file']="@$(copyin)"
      else
        posts['file']="@$optarg"
      fi
      ;;
    g)
      add2tar "$optarg"
      ;;
    h)
      if [[ -n $cmd ]]; then
        if [[ ${#args[@]} -eq 0 ]]; then
          args=( "$cmd" )
        else
          usage 2
        fi
      fi
      cmd="help"
      ;;
    [$opt1arg])
      opts[$oname]=$optarg
      ;;
    [$opt0arg])
      opts[$oname]=true
      ;;
    *)
      echo "ERROR: unrecognized option -$oname" >&2
      exit 2
      ;;
  esac
done


#### command-specific usage ####
if [[ -z $cmd ]]; then
  usage 2
elif [[ $cmd =~ ^h ]]; then
  (
  if [[ ${#args[@]} -eq 0 ]]; then
    usage
  else case "${args[0]}" in
    p*)
      echo "\
Usage: $0 p[roject] [<subcommand>] [<options>]

Available subcommands are:
  l[ist]  : list all projects for the course (default)
            projects are one per line as \"<pid> <project>\"
  i[nfo]  : show details for a certain project
  c[reate]: create a new project
  m[odify]: modify existing project
  d[elete]: delete existing project
course must be specified for every subcommand.
project must be specified for all subcommands except \"all\".
Results are displayed in query-file format.

Example: $0 project info -p project=lab10 >lab10.txt
         ... change lab10.txt as you like ...
         $0 project modify -p project=lab10 -q lab10.txt

Options:"
      genopts
      ;;
    f*)
      echo "\
Usage: $0 f[iles] [<subcommand> <filenames>...] [<options>]

Available subcommands are:
  l[ist]
    list all testcase files for the given project (default)
    The list consists of \"<fileid> <filename>\" lines.
  i[nfo] <filename>
    show info for the named file in queriy-file format
  u[pload] <filenames>...
    upload a bunch of files
  m[odify] <fileid>
    modify metatada for the given file
  d[elete] <fileid>
    delete the given file, and return a list of those remaining
  g[et] <fileid>
    download the given file
  a[ll] <pid>
    NOTE: DOES NOT CURRENTLY WORK DUE TO API BUG
    download all files as a tar.gz (see -d option)
    Unfortunately, this requires the numerical project id (pid);
    see the \"project list\" command.

course and project must be speficied for all subcommands.

Example: $0 files list -p project=lab10
         $0 files info file1.txt
         $0 files upload file2.txt file3.txt -p project=lab10
         $0 files all -p project=lab10 -d output_folder

Options:"
      genopts
      ;;
    t*)
      echo "\
Usage: $0 t[estcase] [<subcommand> [<tid>]] [<options>]

Example: $0 testcase create -q- <<END
rulename easy
stdin <<STOPIN
input is
on multiple lines
STOPIN
outvalue output on a single line
END

Available subcommands are:
  l[ist]        : list all test cases for current project (default)
                  testcases are one per line as \"<tid> <rulename>\"
  i[nfo] <tid>  : show details for a certain testcase
  c[reate]      : create a new testcase
  m[odify] <tid>: modify existing testcase
  d[elete] <tid>: delete existing testcase
course and project must be specified for every subcommand.
Results are displayed in query-file format.

Options:"
      genopts
      ;;
    s*)
      echo "\
Usage: $0 s[ubmission] [<subcommand> <filenames>...] [<options>]

Available subcommands are:
  l[ist]: list most recent submissions from all users (default)
          Output lines are formatted \"<sid> <user> <points> <date> <time>\"
  u[ser] <user>: list all submissions for that user
  s[ubmit] <files>...
      upload files for submission
      Default is as yourself, or specify another user via -p
  g[et] <user>
      Download tar.gz of a single submission (see -d option)
      Specify sid via -p to get a not-most-recent submission.

course and project must be speficied for all subcommands.

Example: $0 submission list
         $0 submission submit file1.c file2.txt -p user=m999999
         $0 submission get m999999 -d midsub

Options:"
      genopts
      ;;
    m*)
      echo "\
Usage: $0 manual [<urlpath>] [<options>]

Runs a query manually, as specified in config files and/or options.
If <urlpath> is given, it is appended to the base url.

Example: $0 manual users/list

Options:"
      genopts
      ;;
    *)
      usage
      ;;
  esac; fi
  ) | less -FX
  exit 0
fi


#### search for config files in parent directories ####
if [[ ${#configs[@]} -eq 0 ]]; then
  curdir=$(pwd)
  reldir=""
  while [[ -n $curdir && $curdir != "/" ]]; do
    if [[ -r $curdir ]]; then
      for f in ".subtoolrc" "subtoolrc"; do
        if [[ -r "$curdir/$f" ]]; then
          configs+=( "$reldir$f" )
        fi
      done
    fi
    curdir=$(dirname "$curdir")
    reldir="../$reldir"
  done
fi


#### open the config file to run this command ####
configonly=${opts[s]-false}
unset -v 'opts[s]'

if ! $configonly; then
  curconfig="$tempdir/_curconfig"
  exec 4>"$curconfig"
else
  exec 4>&1
fi

# helper function for subcommands, relies on $cmd and $subcmd
function subhelp {
  echo "ERROR: $1 in $cmd $subcmd" >&2
  echo "Run \"$0 help $cmd\" for help." >&2
  exit 2
}


#### process commands ####
# special variables to set:
# url - to query that path in the API
# jqproc - run this jq script on the output
# table - display jq output object as a table
table=false
blankok=false
# callback - function to call if the command fails somehow
if [[ $cmd =~ ^p ]]; then
  #### PROJECT ####
  url="project"
  [[ ${#args[@]} -ge 2 ]] && subhelp "too many arguments"
  subcmd=${args[0]-'list'}
  case "$subcmd" in
    l*)
      url+="/list"
      jqproc='.[] | (.pid | tostring) + " " + .project'
      ;;
    i*)
      url+='/list'
      jqproc='.[0] | objects'
      table=true
      ;;
    c*)
      url+='/add'
      table=true
      ;;
    m*)
      url+='/update'
      table=true
      ;;
    d*)
      url+='/delete'
      ;;
    *)
      subhelp "unrecognized subcommand"
      ;;
  esac
elif [[ $cmd =~ ^f ]]; then
  #### TESTCASE FILES ####
  url="testfile"
  subcmd=${args[0]-'list'}
  case "$subcmd" in
    l*)
      [[ ${#args[@]} -ge 2 ]] && subhelp "too many arguments"
      url+="/list"
      jqproc='.[] | ((.fid | tostring) + " " + .filename)'
      blankok=true
      ;;
    i*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify filename"
      url+="/list"
      jqproc=".[] | select(.filename == \"${args[1]}\")"
      table=true
      ;;
    u*)
      url+="/upload"
      for (( i = 1; i < ${#args[@]}; i++ )); do
        add2tar "${args[i]}"
      done
      rawout=true # XXX because of bug in API
      ;;
    m*)
      url+="/update"
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify fileid"
      posts['fid']=${args[1]}
      jqproc='.[0]'
      table=true
      ;;
    d*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify fileid"
      url+="/delete"
      posts['fid']=${args[1]}
      jqproc='.[] | ((.fid | tostring) + " " + .filename)'
      blankok=true
      ;;
    g*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify fileid"
      posts['fid']=${args[1]}
      url+="/pull-file"
      rawout=true
      ;;
    a*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify pid"
      posts['pid']=${args[1]}
      url+="/pull"
      rawout=true
      ;;
    *)
      subhelp "unrecognized subcommand"
      ;;
  esac
elif [[ $cmd =~ ^t ]]; then
  #### TESTCASE ####
  url="testcase"
  subcmd=${args[0]-'list'}
  case "$subcmd" in
    l*)
      [[ ${#args[@]} -le 1 ]] || subhelp "too many arguments"
      url+="/list"
      jqproc='.[] | (.tid | tostring) + " " + .rulename'
      blankok=true
      ;;
    i*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify tid"
      url+='/list'
      jqproc=".[] | select(.tid == ${args[1]})"
      table=true
      ;;
    c*)
      [[ ${#args[@]} -le 1 ]] || subhelp "too many arguments"
      url+='/add'
      table=true
      ;;
    m*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify tid"
      posts['tid']=${args[1]}
      url+='/update'
      table=true
      ;;
    d*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify tid"
      posts['tid']=${args[1]}
      url+='/delete'
      jqproc='.[] | (.tid | tostring) + " " + .rulename'
      blankok=true
      ;;
    *)
      subhelp "unrecognized subcommand"
      ;;
  esac
elif [[ $cmd =~ ^s ]]; then
  #### SUBMISSION ####
  url="submission"
  subcmd=${args[0]-'list'}
  case "$subcmd" in
    l*)
      [[ ${#args[@]} -ge 2 ]] && subhelp "too many arguments"
      url+="/recent"
      jqproc='.[] | ((.sid | tostring) + " " + .user + " " + (.points | tostring) + " " + .datestamp)'
      blankok=true
      ;;
    u*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify user"
      url+="/list"
      posts['user']=${args[1]}
      jqproc='.[] | ((.sid | tostring) + " " + .user + (.points | tostring) + .datestamp)'
      blankok=true
      ;;
    s*)
      url+="/upload"
      for (( i = 1; i < ${#args[@]}; i++ )); do
        add2tar "${args[i]}"
      done
      rawout=true # XXX because of bug in API
      ;;
    g*)
      [[ ${#args[@]} -eq 2 ]] || subhelp "must specify user"
      url+='/pull'
      posts['user']=${args[1]}
      rawout=true
      ;;
    *)
      subhelp "unrecognized subcommand"
      ;;
  esac
elif [[ $cmd =~ ^i ]]; then
  if [[ ${#args[@]} -lt 1 ]]; then
    exit 2
  elif [[ ${args[0]} = 'j2q' ]]; then
    json2query
    exit 0
  elif [[ ${args[0]} = 'q2j' ]]; then
    query2json
    exit 0
  else
    exit 2
  fi
elif [[ $cmd =~ ^m ]]; then
  #### MANUAL ####
  if [[ ${#args[@]} -eq 0 ]]; then
    :
  elif [[ ${#args[@]} -eq 1 ]]; then
    url=${args[0]}
  else
    echo "too many arguments for manual command" >&2
    exit 2
  fi
else
  echo "invalid command \"$cmd\"" >&2
  exit 2
fi


#### process general options ####
urlbase=${opts[u]-$defurlbase}
unset -v 'opts[u]'

if [[ -v opts[r] && -v opts[j] ]]; then
  echo "ERROR: Options -r and -j conflict" >&2
  exit 2
fi

rawout=${rawout-${opts[r]-false}}
unset -v 'opts[r]'

if [[ -v opts[d] ]]; then
  rawout=true
  outdir=${opts[d]}
  unset -v 'opts[d]'
  if [[ -e $outdir ]]; then
    if [[ ! -d $outdir ]]; then
      echo "ERROR: $outdir must name a directory for output" >&2
      exit 3
    fi
  else
    if ! mkdir "$outdir"; then
      echo "ERROR: could not create output directory $outdir" >&2
      exit 3
    fi
  fi
fi

if [[ -v opts[j] ]]; then
  if [[ -v jqproc ]]; then
    echo "WARNING: -j option is overriding command-based processing" >&2
  fi
  jqproc=${opts[j]}
  unset -v 'opts[j]'
fi

if $rawout && [[ -v jqproc ]]; then
  echo "WARNING: -r option is overriding command-based processing" >&2
  unset -v 'jqproc'
fi

# combine input files into a single tarball
if [[ ${#files2tar[@]} -gt 0 ]]; then
  td="$tempdir/_tarball"
  mkdir "$td"
  for f in "${files2tar[@]}"; do
    cp -r "$f" "$td"/
  done
  tb=$(readlink -f "$tempdir/_files.tar.gz")
  pushd "$td" >/dev/null
  tar czf "$tb" *
  popd >/dev/null
  posts['file']="@$tb"
fi

for badopt in ${!opts[@]}; do
  echo "ERROR: invalid option $badopt" >&2
  exit 2
done

# helper function to add a line to the local config file
function confline {
  local res=$2
  res=${res//\\/\\\\}
  res=${res//\"/\\\"}
  echo "$1 = \"$res\"" >&4
}

# helper function to add POST form parameters to config file
function formline {
  confline "form" "$1=$2"
}

for cfile in "${configs[@]}"; do
  confline "config" "$cfile"
done

for pname in "${!posts[@]}"; do
  formline "$pname" "${posts["$pname"]}"
done

if [[ -v url ]]; then
  confline "url" "$urlbase/$url"
fi


#### close the config file and run curl already! ####
exec 4>&-

function maybecurl {
  alljq=".results | values${jqproc:+" | $jqproc"}"
  if $configonly; then
    savetemp=true
    echo "Config file written to stdout; use with curl directly or with $0 manual" >&2
    if [[ -v outdir ]]; then
      echo "The output will be a binary .tar.gz file" >&2
    elif ! $rawout; then
      echo "Pipe output to the command" >&2
      echo "  jq -r ${alljq@Q}" >&2
    fi
    return 0
  else
    set +e
    $CURL -K "$curconfig" | (
      if $rawout; then
        if [[ -v outdir ]]; then
          cd "$outdir"
          tar -x -z -v -k -f-
        else
          cat
        fi
      else
        jq -r ".status, if (.status == 1) then ($alljq) else .message end" | (
          read oz
          [[ $oz -eq 1 ]] || exec 1>&2
          cat
        ) | (
          if [[ $table = 'true' ]]; then
            json2query
          else
            cat
          fi
        ) | (
          $blankok && cat || grep ''
        )
      fi
    )
    ret=$?
    set -e
    return $ret
  fi
}

maybecurl

# XXX
# sshcurl -K cconf http://submit.cs.usna.edu/api/project/list | jq -r '.results[].project'
# jq -r '.results[] | select(.project == "lab2") | to_entries | .[] | .key + "," + (.value | tostring)' 
